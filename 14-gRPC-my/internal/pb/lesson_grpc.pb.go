// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: lesson.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LessonServiceClient is the client API for LessonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LessonServiceClient interface {
	CreateLesson(ctx context.Context, in *CreateLessonRequest, opts ...grpc.CallOption) (*Lesson, error)
	CreateLessonStream(ctx context.Context, opts ...grpc.CallOption) (LessonService_CreateLessonStreamClient, error)
	CreateLessonStreamBidirectional(ctx context.Context, opts ...grpc.CallOption) (LessonService_CreateLessonStreamBidirectionalClient, error)
	ListLessons(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*LessonList, error)
	GetLesson(ctx context.Context, in *LessonGetRequest, opts ...grpc.CallOption) (*Lesson, error)
}

type lessonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLessonServiceClient(cc grpc.ClientConnInterface) LessonServiceClient {
	return &lessonServiceClient{cc}
}

func (c *lessonServiceClient) CreateLesson(ctx context.Context, in *CreateLessonRequest, opts ...grpc.CallOption) (*Lesson, error) {
	out := new(Lesson)
	err := c.cc.Invoke(ctx, "/pb.LessonService/CreateLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) CreateLessonStream(ctx context.Context, opts ...grpc.CallOption) (LessonService_CreateLessonStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &LessonService_ServiceDesc.Streams[0], "/pb.LessonService/CreateLessonStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &lessonServiceCreateLessonStreamClient{stream}
	return x, nil
}

type LessonService_CreateLessonStreamClient interface {
	Send(*CreateLessonRequest) error
	CloseAndRecv() (*LessonList, error)
	grpc.ClientStream
}

type lessonServiceCreateLessonStreamClient struct {
	grpc.ClientStream
}

func (x *lessonServiceCreateLessonStreamClient) Send(m *CreateLessonRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *lessonServiceCreateLessonStreamClient) CloseAndRecv() (*LessonList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LessonList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lessonServiceClient) CreateLessonStreamBidirectional(ctx context.Context, opts ...grpc.CallOption) (LessonService_CreateLessonStreamBidirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &LessonService_ServiceDesc.Streams[1], "/pb.LessonService/CreateLessonStreamBidirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &lessonServiceCreateLessonStreamBidirectionalClient{stream}
	return x, nil
}

type LessonService_CreateLessonStreamBidirectionalClient interface {
	Send(*CreateLessonRequest) error
	Recv() (*Lesson, error)
	grpc.ClientStream
}

type lessonServiceCreateLessonStreamBidirectionalClient struct {
	grpc.ClientStream
}

func (x *lessonServiceCreateLessonStreamBidirectionalClient) Send(m *CreateLessonRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *lessonServiceCreateLessonStreamBidirectionalClient) Recv() (*Lesson, error) {
	m := new(Lesson)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lessonServiceClient) ListLessons(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*LessonList, error) {
	out := new(LessonList)
	err := c.cc.Invoke(ctx, "/pb.LessonService/ListLessons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonServiceClient) GetLesson(ctx context.Context, in *LessonGetRequest, opts ...grpc.CallOption) (*Lesson, error) {
	out := new(Lesson)
	err := c.cc.Invoke(ctx, "/pb.LessonService/GetLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LessonServiceServer is the server API for LessonService service.
// All implementations must embed UnimplementedLessonServiceServer
// for forward compatibility
type LessonServiceServer interface {
	CreateLesson(context.Context, *CreateLessonRequest) (*Lesson, error)
	CreateLessonStream(LessonService_CreateLessonStreamServer) error
	CreateLessonStreamBidirectional(LessonService_CreateLessonStreamBidirectionalServer) error
	ListLessons(context.Context, *Blank) (*LessonList, error)
	GetLesson(context.Context, *LessonGetRequest) (*Lesson, error)
	mustEmbedUnimplementedLessonServiceServer()
}

// UnimplementedLessonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLessonServiceServer struct {
}

func (UnimplementedLessonServiceServer) CreateLesson(context.Context, *CreateLessonRequest) (*Lesson, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLesson not implemented")
}
func (UnimplementedLessonServiceServer) CreateLessonStream(LessonService_CreateLessonStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateLessonStream not implemented")
}
func (UnimplementedLessonServiceServer) CreateLessonStreamBidirectional(LessonService_CreateLessonStreamBidirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateLessonStreamBidirectional not implemented")
}
func (UnimplementedLessonServiceServer) ListLessons(context.Context, *Blank) (*LessonList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLessons not implemented")
}
func (UnimplementedLessonServiceServer) GetLesson(context.Context, *LessonGetRequest) (*Lesson, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLesson not implemented")
}
func (UnimplementedLessonServiceServer) mustEmbedUnimplementedLessonServiceServer() {}

// UnsafeLessonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LessonServiceServer will
// result in compilation errors.
type UnsafeLessonServiceServer interface {
	mustEmbedUnimplementedLessonServiceServer()
}

func RegisterLessonServiceServer(s grpc.ServiceRegistrar, srv LessonServiceServer) {
	s.RegisterService(&LessonService_ServiceDesc, srv)
}

func _LessonService_CreateLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).CreateLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LessonService/CreateLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).CreateLesson(ctx, req.(*CreateLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_CreateLessonStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LessonServiceServer).CreateLessonStream(&lessonServiceCreateLessonStreamServer{stream})
}

type LessonService_CreateLessonStreamServer interface {
	SendAndClose(*LessonList) error
	Recv() (*CreateLessonRequest, error)
	grpc.ServerStream
}

type lessonServiceCreateLessonStreamServer struct {
	grpc.ServerStream
}

func (x *lessonServiceCreateLessonStreamServer) SendAndClose(m *LessonList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *lessonServiceCreateLessonStreamServer) Recv() (*CreateLessonRequest, error) {
	m := new(CreateLessonRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LessonService_CreateLessonStreamBidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LessonServiceServer).CreateLessonStreamBidirectional(&lessonServiceCreateLessonStreamBidirectionalServer{stream})
}

type LessonService_CreateLessonStreamBidirectionalServer interface {
	Send(*Lesson) error
	Recv() (*CreateLessonRequest, error)
	grpc.ServerStream
}

type lessonServiceCreateLessonStreamBidirectionalServer struct {
	grpc.ServerStream
}

func (x *lessonServiceCreateLessonStreamBidirectionalServer) Send(m *Lesson) error {
	return x.ServerStream.SendMsg(m)
}

func (x *lessonServiceCreateLessonStreamBidirectionalServer) Recv() (*CreateLessonRequest, error) {
	m := new(CreateLessonRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LessonService_ListLessons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).ListLessons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LessonService/ListLessons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).ListLessons(ctx, req.(*Blank))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonService_GetLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LessonGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServiceServer).GetLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LessonService/GetLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServiceServer).GetLesson(ctx, req.(*LessonGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LessonService_ServiceDesc is the grpc.ServiceDesc for LessonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LessonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LessonService",
	HandlerType: (*LessonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLesson",
			Handler:    _LessonService_CreateLesson_Handler,
		},
		{
			MethodName: "ListLessons",
			Handler:    _LessonService_ListLessons_Handler,
		},
		{
			MethodName: "GetLesson",
			Handler:    _LessonService_GetLesson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateLessonStream",
			Handler:       _LessonService_CreateLessonStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CreateLessonStreamBidirectional",
			Handler:       _LessonService_CreateLessonStreamBidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "lesson.proto",
}
